{
  "info": {
    "name": "Sustainability Actions API",
    "description": "Complete collection for the Sustainability Actions Tracker API with automated tests and environment support",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.20250828",
    "updatedAt": "2025-08-28T18:08:49.429446"
  },
  "auth": {
    "type": "noauth"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set dynamic timestamp for requests (yesterday to avoid future date validation)",
          "const yesterday = new Date();",
          "yesterday.setDate(yesterday.getDate() - 1);",
          "pm.globals.set('timestamp', yesterday.toISOString().split('T')[0]);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to check response time",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "// Global test to check content type for successful requests (except 204 No Content)",
          "if (pm.response.code < 300 && pm.response.code !== 204) {",
          "    pm.test('Content-Type is application/json', function () {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    });",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{BASE_URL}}",
      "type": "string"
    },
    {
      "key": "actionId",
      "value": "1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Actions",
      "description": "All CRUD operations for sustainability actions",
      "item": [
        {
          "name": "Get All Actions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "// Store first action ID for other requests",
                  "if (pm.response.json().length > 0) {",
                  "    pm.collectionVariables.set('actionId', pm.response.json()[0].id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/actions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "actions",
                ""
              ]
            },
            "description": "Retrieve all sustainability actions from the API"
          }
        },
        {
          "name": "Create New Action",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('action');",
                  "    pm.expect(jsonData).to.have.property('date');",
                  "    pm.expect(jsonData).to.have.property('points');",
                  "});",
                  "",
                  "pm.test('Created action matches request data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestData = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(jsonData.action).to.eql(requestData.action);",
                  "    pm.expect(jsonData.points).to.eql(requestData.points);",
                  "});",
                  "",
                  "// Store created action ID for subsequent requests",
                  "if (pm.response.code === 201 && pm.response.json().id) {",
                  "    pm.collectionVariables.set('newActionId', pm.response.json().id);",
                  "    console.log('Created action with ID:', pm.response.json().id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"Solar Panel Installation\",\n  \"date\": \"{{timestamp}}\",\n  \"points\": 100\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/actions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "actions",
                ""
              ]
            },
            "description": "Create a new sustainability action"
          }
        },
        {
          "name": "Get Action by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains action data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('action');",
                  "    pm.expect(jsonData).to.have.property('date');",
                  "    pm.expect(jsonData).to.have.property('points');",
                  "});",
                  "",
                  "pm.test('Action ID matches requested ID', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id.toString()).to.eql(pm.collectionVariables.get('actionId'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/actions/{{actionId}}/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "actions",
                "{{actionId}}",
                ""
              ]
            },
            "description": "Retrieve a specific sustainability action by its ID"
          }
        },
        {
          "name": "Update Action (PUT)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated action contains new data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestData = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(jsonData.action).to.eql(requestData.action);",
                  "    pm.expect(jsonData.points).to.eql(requestData.points);",
                  "});",
                  "",
                  "pm.test('Action ID remains unchanged', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id.toString()).to.eql(pm.collectionVariables.get('actionId'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"Updated Solar Panel Installation\",\n  \"date\": \"{{timestamp}}\",\n  \"points\": 150\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/actions/{{actionId}}/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "actions",
                "{{actionId}}",
                ""
              ]
            },
            "description": "Update a sustainability action using PUT (full update)"
          }
        },
        {
          "name": "Update Action (PATCH)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Patched field is updated', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestData = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(jsonData.points).to.eql(requestData.points);",
                  "});",
                  "",
                  "pm.test('Other fields remain unchanged', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('action');",
                  "    pm.expect(jsonData).to.have.property('date');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"points\": 200\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/actions/{{actionId}}/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "actions",
                "{{actionId}}",
                ""
              ]
            },
            "description": "Update specific fields of a sustainability action using PATCH (partial update)"
          }
        },
        {
          "name": "Delete Action",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Fallback: if newActionId is not set, use actionId",
                  "if (!pm.collectionVariables.get('newActionId') && pm.collectionVariables.get('actionId')) {",
                  "    pm.collectionVariables.set('newActionId', pm.collectionVariables.get('actionId'));",
                  "    console.log('Using fallback actionId for delete:', pm.collectionVariables.get('actionId'));",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Response body is empty', function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/actions/{{newActionId}}/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "actions",
                "{{newActionId}}",
                ""
              ]
            },
            "description": "Delete a sustainability action by ID (uses the action created earlier)"
          }
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "description": "Test API error handling and validation",
      "item": [
        {
          "name": "Get Non-existent Action",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response contains detail', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('detail');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/actions/99999/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "actions",
                "99999",
                ""
              ]
            },
            "description": "Test 404 error when trying to get a non-existent action"
          }
        },
        {
          "name": "Create Action with Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error response contains validation errors', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "    // Should contain field-specific errors",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"\",\n  \"date\": \"invalid-date\",\n  \"points\": -10\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/actions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "actions",
                ""
              ]
            },
            "description": "Test validation errors with invalid action data"
          }
        },
        {
          "name": "Create Action with Future Date",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error mentions future date validation', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const errorText = JSON.stringify(jsonData).toLowerCase();",
                  "    pm.expect(errorText).to.include('future');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"Future Action\",\n  \"date\": \"2030-01-01\",\n  \"points\": 50\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/actions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "actions",
                ""
              ]
            },
            "description": "Test validation error for future dates"
          }
        }
      ]
    }
  ]
}